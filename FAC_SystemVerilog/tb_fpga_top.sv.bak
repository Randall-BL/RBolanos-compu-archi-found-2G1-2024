`timescale 1ns / 1ps

module tb_fpga_top;

    // Señales para la FPGA
    reg clk;
    reg rst_n;
    reg rx;
    wire [3:0] leds;

    // Instanciar el módulo principal de la FPGA
    fpga_top uut (
        .clk(clk),
        .rst_n(rst_n),
        .rx(rx),
        .leds(leds)
    );

    // Generar el reloj
    always #5 clk = ~clk;  // Reloj con periodo de 10 ns

    // Tarea para enviar un byte a través de UART
    task send_uart_byte(input [7:0] byte);
        integer i;
        begin
            // Enviar bit de start (bajo)
            rx = 0;
            #104160;  // Aproximadamente 9600 baudios a 10ns por ciclo de reloj

            // Enviar 8 bits de datos (LSB primero)
            for (i = 0; i < 8; i = i + 1) begin
                rx = byte[i];
                #104160;
            end

            // Enviar bit de stop (alto)
            rx = 1;
            #104160;
        end
    endtask

    // Simulación
    initial begin
        // Inicialización de señales
        clk = 0;
        rst_n = 0;
        rx = 1;  // Línea UART en reposo es alta

        // Reset
        #100;
        rst_n = 1;

        // Caso 1: Enviar 0100 (encender solo el LED 2)
        send_uart_byte(8'b00000100);  // Enviar 4 bits útiles, el resto ignorado
        #1000000;  // Esperar a que los LEDs se actualicen
        $display("LEDs: %b", leds);   // Debería ser 0100

        // Caso 2: Enviar 1000 (encender solo el LED 4)
        send_uart_byte(8'b00001000);
        #1000000;
        $display("LEDs: %b", leds);   // Debería ser 1000

        // Caso 3: Enviar 0011 (encender LED 1 y LED 2)
        send_uart_byte(8'b00000011);
        #1000000;
        $display("LEDs: %b", leds);   // Debería ser 0011

        // Caso 4: Enviar 1111 (encender todos los LEDs)
        send_uart_byte(8'b00001111);
        #1000000;
        $display("LEDs: %b", leds);   // Debería ser 1111

        // Final de la simulación
        $finish;
    end
endmodule
